{
	"name": "dataflow summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_NYC_Payroll_Data_2021_sql",
						"type": "DatasetReference"
					},
					"name": "source2021Payrollsql"
				},
				{
					"dataset": {
						"referenceName": "ds_NYC_Payroll_Data_2020_sql",
						"type": "DatasetReference"
					},
					"name": "source2020Payrollsql"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_NYC_Payroll_Summary_sql",
						"type": "DatasetReference"
					},
					"name": "sinkSummarysql"
				},
				{
					"dataset": {
						"referenceName": "ds_destination_nycpayroll_Summary_csv",
						"type": "DatasetReference"
					},
					"name": "sinkSummarycsv"
				}
			],
			"transformations": [
				{
					"name": "union2021and2020"
				},
				{
					"name": "select2021AgencyNameFiscalYearAmountsCols"
				},
				{
					"name": "select2020AgencyNameFiscalYearAmountsCols"
				},
				{
					"name": "filterYearsRange"
				},
				{
					"name": "derivedTotalPaidCol"
				},
				{
					"name": "aggregateSalariesByYearAndAgency"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2021)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyCode as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2021Payrollsql",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as string,",
				"          AgencyName as string,",
				"          EmployeeID as string,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2020Payrollsql",
				"select2021AgencyNameFiscalYearAmountsCols, select2020AgencyNameFiscalYearAmountsCols union(byName: true,",
				"     partitionBy('roundRobin', 2))~> union2021and2020",
				"source2021Payrollsql select(mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          RegularGrossPaid,",
				"          TotalOTPaid,",
				"          TotalOtherPay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2021AgencyNameFiscalYearAmountsCols",
				"source2020Payrollsql select(mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          RegularGrossPaid,",
				"          TotalOTPaid,",
				"          TotalOtherPay",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2020AgencyNameFiscalYearAmountsCols",
				"union2021and2020 filter(FiscalYear>=$dataflow_param_fiscalyear) ~> filterYearsRange",
				"filterYearsRange derive(TotalPaid = RegularGrossPaid+TotalOTPaid+TotalOtherPay) ~> derivedTotalPaidCol",
				"derivedTotalPaidCol aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> aggregateSalariesByYearAndAgency",
				"aggregateSalariesByYearAndAgency sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid",
				"     )) ~> sinkSummarysql",
				"aggregateSalariesByYearAndAgency sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as string,",
				"          AgencyName as string,",
				"          TotalPaid as string",
				"     ),",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid",
				"     )) ~> sinkSummarycsv"
			]
		}
	}
}